//=====================================================//
//  Copyright 2005         //
//=====================================================//
using Microsoft.Win32;
using System;
using System.Collections;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;

using AGI.Attr;
using AGI.Plugin;
using AGI.Hpop.Plugin;
using AGI.VectorGeometryTool.Plugin;
using AGI.STK.Plugin;

namespace MYPLUGIN_NAMESPACE
{
	/// <summary>
	/// MYPLUGIN class provides an empty force model plugin 
	/// </summary>
	// NOTE: Generate your own Guid using Microsoft's GuidGen.exe
	// If you used this plugin in STK 6, 7 you should create a new
	// copy of your plugin's source, and update it with a new GUID
	// for STK 8.  Then you will be able to make changes in the 
	// new STK 8 plugin and not affect your old STK 6,7 plugin.
	[Guid("67EFDA1F-749C-4cd7-BA20-7D3B5136C7E5")]
	// NOTE: Create your own ProgId to match your plugin's namespace and name
	[ProgId("MYPLUGIN_NAMESPACE.MYPLUGIN")]
	// NOTE: Specify the ClassInterfaceType.None enumeration, so the custom COM Interface 
	// you created, i.e. IMYPLUGIN, is used instead of an autogenerated COM Interface.
	[ClassInterface(ClassInterfaceType.None)]
	public class MYPLUGIN :
		IMYPLUGIN,
		IAgAsHpopPlugin,
		IAgUtPluginConfig
	{
		#region Plugin Private Data Members

		// site interface
		private IAgUtPluginSite			m_UPS;
		private string					m_Name;	
		private bool					m_Enabled;						


		// plugin parameter data
		private object					m_Scope;

		// debug message parameters
		private bool					m_DebugMode;
		private int						m_PreNextCntr;
		private int						m_PreNextMsgInterval;
		private int						m_EvalCntr;
		private int						m_EvalMsgInterval;
		private int						m_PostEvalCntr;
		private int						m_PostEvalMsgInterval;

		#endregion

		#region Messaging Code

		private void Message (AgEUtLogMsgType severity, String msgStr)
		{
			if(  m_UPS != null )
			{
				m_UPS.Message( severity, msgStr);
			}
		}

		private void DebugMsg(int count, int interval, String msgStr)
		{
			if(m_DebugMode)
			{
				if(count % interval == 0)
				{
					Message(AgEUtLogMsgType.eUtLogMsgDebug, msgStr);
				}
			}
		}

		#endregion

		#region Life Cycle Methods

		public MYPLUGIN() : base()
		{
			try
			{
				m_Name = "MYPLUGIN";
				m_Enabled = false;

				m_UPS = null;
				m_Scope = null;

				//===========================
				// messaging related attributes
				//===========================

				m_DebugMode				= false;

				m_EvalMsgInterval		= 5000;
				m_PostEvalMsgInterval	= 5000;
				m_PreNextMsgInterval	= 1000;

				m_PreNextCntr			= 0; 
				m_EvalCntr				= 0; 
				m_PostEvalCntr			= 0;
			}
			finally
			{
			}
		}

		#endregion
		
		#region IMYPLUGIN Interface Implementation
		//=============================================
		// Plugin Attributes to be configured
		// will be exposed via .NET properties
		// and using the Attribute Builder reference
		// passed as a parameter to the GetPluginConfig
		// Method.
		//==============================================

		public string Name
		{
			get
			{
				return m_Name;
			}
			set
			{
				m_Name = value;
			}
		}

		public bool Enabled
		{
			get
			{
				return m_Enabled;
			}
			set
			{
				m_Enabled = value;
			}
		}

		public bool DebugMode
		{
			get
			{
				return m_DebugMode;
			}
			set
			{
				m_DebugMode = value;
			}
		}
		public int EvalMsgInterval
		{
			get
			{
				return m_EvalMsgInterval;
			}
			set
			{
				m_EvalMsgInterval = value;
			}
		}
		public int PostEvalMsgInterval
		{
			get
			{
				return m_PostEvalMsgInterval;
			}
			set
			{
				m_PostEvalMsgInterval = value;
			}
		}
		public int PreNextMsgInterval
		{
			get
			{
				return m_PreNextMsgInterval;
			}
			set
			{
				m_PreNextMsgInterval = value;
			}
		}

		#endregion

		#region IAgAsHpopPlugin Interface Implementation

		public bool Init( IAgUtPluginSite Ups )
		{
			try
			{
				m_UPS = Ups;

				m_Enabled = (m_UPS != null);
			}
			catch( Exception ex )
			{
				m_Enabled = false;

				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
					m_Name+".Init(): Exception Message( " + ex.Message + " )" );

				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
					m_Name+".Init(): Exception StackTr( " + ex.StackTrace + " )" );
			}
			finally
			{
			}

			return m_Enabled;
		}

		public bool PrePropagate( IAgAsHpopPluginResult Result )
		{
			try
			{
				if(m_Enabled)
				{
					DebugMsg(0, 1, m_Name+".PrePropagate() called");
				}
			}
			catch( Exception ex )
			{
				m_Enabled = false;

				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
					m_Name+".Init(): Exception Message( " + ex.Message + " )" );

				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
					m_Name+".Init(): Exception StackTr( " + ex.StackTrace + " )" );
			}
			finally
			{
			}

			return m_Enabled;
		}

		public bool PreNextStep( IAgAsHpopPluginResult Result )
		{
			try
			{
				if(m_Enabled)
				{
					m_PreNextCntr++;
					DebugMsg(m_PreNextCntr, 
						m_PreNextMsgInterval, 
						m_Name+".PreNextStep() called the " + m_PreNextCntr + "th time");
				}
			}
			catch( Exception ex )
			{
				m_Enabled = false;

				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
					m_Name+".Init(): Exception Message( " + ex.Message + " )" );

				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
					m_Name+".Init(): Exception StackTr( " + ex.StackTrace + " )" );
			}
			finally
			{
			}

			return m_Enabled;
		}

		public bool Evaluate( IAgAsHpopPluginResultEval ResultEval )
		{
			try
			{
				if(m_Enabled)
				{
					m_EvalCntr++;
					DebugMsg(m_EvalCntr, 
						m_EvalMsgInterval, 
						m_Name+".Evaluate() called the " + m_EvalCntr + "th time");
				}
			}
			catch( Exception ex )
			{
				m_Enabled = false;

				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
					m_Name+".Init(): Exception Message( " + ex.Message + " )" );

				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
					m_Name+".Init(): Exception StackTr( " + ex.StackTrace + " )" );
			}
			finally
			{
			}

			return m_Enabled;

		}

		public bool PostEvaluate( IAgAsHpopPluginResultPostEval ResultEval )
		{
			try
			{
				if(m_Enabled)
				{
					m_PostEvalCntr++;
					DebugMsg(m_PostEvalCntr, 
						m_PostEvalMsgInterval, 
						m_Name+".PostEvaluate() called the " + m_PostEvalCntr + "th time");
				}

			}
			catch( Exception ex )
			{
				m_Enabled = false;

				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
					m_Name+".Init(): Exception Message( " + ex.Message + " )" );

				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
					m_Name+".Init(): Exception StackTr( " + ex.StackTrace + " )" );
			}
			finally
			{
			}

			return m_Enabled;

		}

		public bool PostPropagate( IAgAsHpopPluginResult Result )
		{
			try
			{
				if(m_Enabled)
				{
					DebugMsg(0, 1, m_Name+".PostPropagate() called");
				}
			}
			catch( Exception ex )
			{
				m_Enabled = false;

				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
					m_Name+".Init(): Exception Message( " + ex.Message + " )" );

				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
					m_Name+".Init(): Exception StackTr( " + ex.StackTrace + " )" );
			}
			finally
			{
			}

			return m_Enabled;
		}

		public void Free()
		{
			try
			{
				if( m_UPS != null)
				{
					Marshal.ReleaseComObject( m_UPS );
				}
				m_UPS = null;
			}
			catch( Exception ex )
			{
				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
					m_Name+".Init(): Exception Message( " + ex.Message + " )" );

				Message(AgEUtLogMsgType.eUtLogMsgAlarm,
					m_Name+".Init(): Exception StackTr( " + ex.StackTrace + " )" );
			}
			finally
			{
			}
		}
		#endregion

		#region IAgUtPluginConfig Interface Implementation

		public object GetPluginConfig( AgAttrBuilder aab )
		{
			try
			{
				if( m_Scope == null )
				{
					m_Scope = aab.NewScope();
				
					//===========================
					// General Plugin attributes
					//===========================
					aab.AddBoolDispatchProperty( 
						m_Scope, 
						"PluginEnabled", 
						"If the plugin is enabled or has experience an error", 
						"Enabled", 
						(int)AgEAttrAddFlags.eAddFlagNone );
			
					//===========================
					// Messaging related attributes
					//===========================
					aab.AddBoolDispatchProperty( 
						m_Scope, 
						"UsePropagationMessages", 
						"Send messages to the message window during propagation", 
						"DebugMode", 
						(int)AgEAttrAddFlags.eAddFlagNone );

					aab.AddIntDispatchProperty( 
						m_Scope, 
						"EvaluateMessageInterval", 
						"The interval at which to send messages from the Evaluate method during propagation", 
						"EvalMsgInterval", 
						(int)AgEAttrAddFlags.eAddFlagNone );

					aab.AddIntDispatchProperty( 
						m_Scope, 
						"PostEvaluateMessageInterval", 
						"The interval at which to send messages from the PostEvaluate method during propagation", 
						"PostEvalMsgInterval", 
						(int)AgEAttrAddFlags.eAddFlagNone );

					aab.AddIntDispatchProperty( 
						m_Scope, 
						"PreNextStepMessageInterval", 
						"The interval at which to send messages from the PreNextStep method during propagation", 
						"PreNextMsgInterval", 
						(int)AgEAttrAddFlags.eAddFlagNone );
				}

				string config;
				config = aab.ToString( this, m_Scope );
			}
			finally
			{
			}

			return m_Scope;
		}

		public void VerifyPluginConfig( AgUtPluginConfigVerifyResult apcvr )
		{
			bool	result	= true;
			string	message = "Ok";

			apcvr.Result	= result;
			apcvr.Message	= message;
		}
		#endregion

        #region Registration functions
        /// <summary>
        /// Called when the assembly is registered for use from COM.
        /// </summary>
        /// <param name="t">The type being exposed to COM.</param>
        [ComRegisterFunction]
        [ComVisible(false)]
        public static void RegisterFunction(Type t)
        {
            RemoveOtherVersions(t);
        }

        /// <summary>
        /// Called when the assembly is unregistered for use from COM.
        /// </summary>
        /// <param name="t">The type exposed to COM.</param>
        [ComUnregisterFunctionAttribute]
        [ComVisible(false)]
        public static void UnregisterFunction(Type t)
        {
            // Do nothing.
        }

        /// <summary>
        /// Called when the assembly is registered for use from COM.
        /// Eliminates the other versions present in the registry for
        /// this type.
        /// </summary>
        /// <param name="t">The type being exposed to COM.</param>
        public static void RemoveOtherVersions(Type t)
        {
            try
            {
                using (RegistryKey clsidKey = Registry.ClassesRoot.OpenSubKey("CLSID"))
                {
                    StringBuilder guidString = new StringBuilder("{");
                    guidString.Append(t.GUID.ToString());
                    guidString.Append("}");
                    using (RegistryKey guidKey = clsidKey.OpenSubKey(guidString.ToString()))
                    {
                        if (guidKey != null)
                        {
                            using (RegistryKey inproc32Key = guidKey.OpenSubKey("InprocServer32", true))
                            {
                                if (inproc32Key != null)
                                {
                                    string currentVersion = t.Assembly.GetName().Version.ToString();
                                    string[] subKeyNames = inproc32Key.GetSubKeyNames();
                                    if (subKeyNames.Length > 1)
                                    {
                                        foreach (string subKeyName in subKeyNames)
                                        {
                                            if (subKeyName != currentVersion)
                                            {
                                                inproc32Key.DeleteSubKey(subKeyName);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch
            {
                // Ignore all exceptions...
            }
        }
        #endregion
	}
}
//=====================================================//
//  Copyright 2005         //
//=====================================================//
