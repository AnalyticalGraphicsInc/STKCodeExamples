Option Strict On
Imports System.EnterpriseServices
Imports System.Runtime.InteropServices
Imports Microsoft.Win32.RegistryKey

Imports Agi.Attr
Imports Agi.Plugin
Imports Agi.VectorGeometryTool.Plugin
Imports Agi.STKObjects
Imports Agi.STK.Plugin

' NOTE: Generate your own Guid using Microsoft's GuidGen.exe
' NOTE: Create your own ProgId to match your plugin's namespace and name
' NOTE: Specify the ClassInterfaceType.None enumeration, so the custom COM Interface 
' you created, i.e. IExample1, is used instead of an autogenerated COM Interface.
<JustInTimeActivation(True), _
GuidAttribute("AB0465D9-1ADB-459e-AC18-2142E8BA6BD8"), _
ProgId("Agi.VGT.CalcScalar.Plugin.Examples.VB_NET.Example1"), _
ClassInterface(ClassInterfaceType.None)> _
Public Class Example1
    Implements IExample1
    Implements IAgCrdnCalcScalarPlugin
    Implements IAgUtPluginConfig

    Private m_AgAttrScope As Object
    Private m_CalcToolProvider As AgCrdnPluginCalcProvider
    Private m_DisplayName As String = "VB_NET.CalcScalarExample"
    Private m_StkRootObject As AgStkObjectRoot
    Private m_ObjectTrajectoryCatesianX As AgCrdnConfiguredCalcScalar
    Private m_ObjectTrajectoryCatesianZ As AgCrdnConfiguredCalcScalar
    Private m_UtPluginSite As AgStkPluginSite
    Private m_VectorToolProvider As AgCrdnPluginProvider

    Private m_MyDouble As Double
    Private m_MyString As String

    Public Property MyDouble() As Double Implements IExample1.MyDouble

        Get
            Return m_MyDouble
        End Get
        Set(ByVal value As Double)
            m_MyDouble = value
        End Set

    End Property

    Public Property MyString() As String Implements IExample1.MyString

        Get
            Return m_MyString
        End Get
        Set(ByVal value As String)
            m_MyString = value
        End Set

    End Property

    Public Function Init(ByVal Site As IAgUtPluginSite) As Boolean Implements IAgCrdnCalcScalarPlugin.Init
        Debug.WriteLine((Me.m_DisplayName & ".Init()"), "Entered:")
        Me.m_UtPluginSite = DirectCast(Site, AgStkPluginSite)
        If (Me.m_UtPluginSite IsNot Nothing) Then
            Me.m_StkRootObject = DirectCast(Me.m_UtPluginSite.StkRootObject, AgStkObjectRoot)
        End If
        Debug.WriteLine((Me.m_DisplayName & ".Init()"), "Exited:")
        Return True
    End Function

    Public Sub Register(ByVal Result As AgCrdnCalcScalarPluginResultReg) Implements IAgCrdnCalcScalarPlugin.Register
        Debug.WriteLine((Me.m_DisplayName & ".Register()"), "Entered:")
        Dim objPath As String = ("[" & Result.ObjectPath & "]")
        Result.ShortDescription = ("Test short Desc: Component created using " & Me.m_DisplayName & " " & objPath)
        Result.LongDescription = ("Test long Desc: Component created using " & Me.m_DisplayName & " " & objPath)
        Dim oPath As String = Result.ObjectPath
        Dim parentPath As String = Result.ParentPath
        Dim grandParentPath As String = Result.GrandParentPath
        Debug.WriteLine(String.Concat(New String() {objPath, " Register() [objPath=", oPath, "] [parentPath=", parentPath, "] [grandParentPath=", grandParentPath, "]"}))
        Debug.WriteLine((Me.m_DisplayName & ".Register()"), "Exited:")
    End Sub

    Public Function Reset(ByVal Result As AgCrdnCalcScalarPluginResultReset) As Boolean Implements IAgCrdnCalcScalarPlugin.Reset
        Dim objPath As String = ("[" & Result.ObjectPath & "]")
        Debug.WriteLine((Me.m_DisplayName & ".Reset()"), "Entered:")
        Me.m_CalcToolProvider = Result.CalcToolProvider
        Me.m_VectorToolProvider = Result.VectorToolProvider
        Me.m_ObjectTrajectoryCatesianX = Me.m_CalcToolProvider.GetCalcScalar("Trajectory(CBF).Cartesian.X", "<MyObject>")
        Me.m_ObjectTrajectoryCatesianZ = Me.m_CalcToolProvider.GetCalcScalar("Trajectory(CBF).Cartesian.Z", "<MyObject>")
        Debug.WriteLine((Me.m_DisplayName & ".Reset()"), "Exited:")
        Return True
    End Function

    Public Function Evaluate(ByVal Result As AgCrdnCalcScalarPluginResultEval) As Boolean Implements IAgCrdnCalcScalarPlugin.Evaluate
        If ((Me.m_ObjectTrajectoryCatesianX IsNot Nothing) AndAlso (Me.m_ObjectTrajectoryCatesianZ IsNot Nothing)) Then
            Dim x As Double = 0
            Dim z As Double = 0
            Me.m_ObjectTrajectoryCatesianX.CurrentValue(Result, x)
            Me.m_ObjectTrajectoryCatesianZ.CurrentValue(Result, z)
            Result.SetValue(x + z)
        End If
        Return True
    End Function

    Public Sub Free() Implements IAgCrdnCalcScalarPlugin.Free
        Debug.WriteLine((Me.m_DisplayName & ".Free()"))
        Me.m_CalcToolProvider = Nothing
        Me.m_VectorToolProvider = Nothing
        Me.m_ObjectTrajectoryCatesianX = Nothing
        Me.m_ObjectTrajectoryCatesianZ = Nothing
    End Sub

    Public Function GetPluginConfig(ByVal pAttrBuilder As AgAttrBuilder) As Object Implements IAgUtPluginConfig.GetPluginConfig
        Debug.WriteLine((Me.m_DisplayName & ".GetPluginConfig()"), "Entered:")
        If (Me.m_AgAttrScope Is Nothing) Then
            Me.m_AgAttrScope = pAttrBuilder.NewScope
            pAttrBuilder.AddStringDispatchProperty(Me.m_AgAttrScope, "MyString", "A string", "MyString", &H10)
            pAttrBuilder.AddDoubleDispatchProperty(Me.m_AgAttrScope, "MyDouble", "A double", "MyDouble", 0)
        End If
        Debug.WriteLine((Me.m_DisplayName & ".GetPluginConfig()"), "Exited:")
        Return Me.m_AgAttrScope
    End Function

    Public Sub VerifyPluginConfig(ByVal pPluginCfgResult As AgUtPluginConfigVerifyResult) Implements IAgUtPluginConfig.VerifyPluginConfig
        Debug.WriteLine((Me.m_DisplayName & ".VerifyPluginConfig()"), "Entered:")
        pPluginCfgResult.Result = True
        pPluginCfgResult.Message = "Ok"
        Debug.WriteLine((Me.m_DisplayName & ".VerifyPluginConfig()"), "Exited:")
    End Sub

End Class
