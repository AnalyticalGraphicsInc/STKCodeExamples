using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using AGI.Attr;
using AGI.Plugin;
using AGI.STK.Plugin;
using AGI.STKObjects;
using AGI.VectorGeometryTool.Plugin;
using Microsoft.Win32;
using System.Text;

namespace Agi.VGT.Axes.Plugin.Examples.CSharp
{
    // NOTE: Generate your own Guid using Microsoft's GuidGen.exe
	[Guid("83C3B4C1-1D2A-40ec-820B-2EDDCDD3DFFE")]
    // NOTE: Create your own ProgId to match your plugin's namespace and name
    [ProgId("Agi.VGT.Axes.Plugin.Examples.CSharp.Example1")]
    // NOTE: Specify the ClassInterfaceType.None enumeration, so the custom COM Interface 
    // you created is used instead of an autogenerated COM Interface.
    [ClassInterface(ClassInterfaceType.None)]
    public class Example1 : 
        IExample1,
        IAgCrdnAxesPlugin,
        IAgUtPluginConfig
    {
        private string m_DisplayName = "CSharp.AxesExample";
        private AgStkPluginSite m_Site;
        private AgStkObjectRoot m_StkRootObject;
        private AgCrdnPluginCalcProvider m_CalcToolProvider;
        private AgCrdnPluginProvider m_VectorToolProvider;
        private AgCrdnConfiguredAxes m_ICRFAxes;

        private object m_AgAttrScope;

        public double MyDouble { get; set; }
        public string MyString { get; set; }

        public bool Evaluate(AgCrdnAxesPluginResultEval Result)
        {
            if (m_ICRFAxes != null)
            {
                double q1 = 0;
                double q2 = 0;
                double q3 = 0;
                double q4 = 0;

                m_ICRFAxes.CurrentValue(Result, ref q1, ref q2, ref q3, ref q4);
                Result.SetQuaternion(q1, q2, q3, q4);

                // Rotate by 30 degrees. The parameters are expected to be in radians.
                Result.EulerRotate(AgECrdnEulerSequence.eCrdnEulerSequence121, 0.5236, 0.5236, 0.5236);
            }

            return true;
        }

        public void Free()
        {
            Debug.WriteLine(m_DisplayName + ".Free()", "Entered:");

            m_Site = null;
            m_StkRootObject = null;
            m_CalcToolProvider = null;
            m_VectorToolProvider = null;
            m_ICRFAxes = null;

            Debug.WriteLine(m_DisplayName + ".Free()", "Exited:");
        }

        public bool Init(IAgUtPluginSite Site)
        {
            Debug.WriteLine(m_DisplayName + ".Init()", "Entered:");

            m_Site = (AgStkPluginSite)Site;

            if (m_Site != null)
            {
                // Get a pointer to the STK Object Model root object
                m_StkRootObject = (AgStkObjectRoot)m_Site.StkRootObject;
            }

            Debug.WriteLine(m_DisplayName + ".Init()", "Exited:");

            return true;
        }

        public void Register(AgCrdnAxesPluginResultReg Result)
        {
            Debug.WriteLine(m_DisplayName + ".Register()", "Entered:");

            string objPath = "[" + Result.ObjectPath + "]";

            Result.ShortDescription = "Test short Desc: Component created using " + m_DisplayName + " " + objPath;
            Result.LongDescription = "Test long Desc: Component created using " + m_DisplayName + " " + objPath;

            string oPath = Result.ObjectPath;
            string parentPath = Result.ParentPath;
            string grandParentPath = Result.GrandParentPath;

            Debug.WriteLine(objPath + " Register() [objPath=" + oPath + "] [parentPath=" + parentPath + "] [grandParentPath=" + grandParentPath + "]");

            Debug.WriteLine(m_DisplayName + ".Register()", "Exited:");
        }

        public bool Reset(AgCrdnAxesPluginResultReset Result)
        {
            string objPath = "[" + Result.ObjectPath + "]";

            Debug.WriteLine(m_DisplayName + ".Reset()", "Entered:");

            m_CalcToolProvider = Result.CalcToolProvider;
            m_VectorToolProvider = Result.VectorToolProvider;

            m_ICRFAxes = m_VectorToolProvider.ConfigureAxes("ICRF", "<MyObject>", "ICRF", "<MyObject>");

            Debug.WriteLine(m_DisplayName + ".Reset()", "Exited:");

            return true;
        }

        public object GetPluginConfig(AGI.Attr.AgAttrBuilder pAttrBuilder)
        {
            Debug.WriteLine(m_DisplayName + ".GetPluginConfig()", "Entered:");

            if (m_AgAttrScope == null)
            {
                m_AgAttrScope = pAttrBuilder.NewScope();

                pAttrBuilder.AddStringDispatchProperty(m_AgAttrScope, "MyString", "A string", "MyString", (int)AgEAttrAddFlags.eAddFlagReadOnly);
                pAttrBuilder.AddDoubleDispatchProperty(m_AgAttrScope, "MyDouble", "A double", "MyDouble", (int)AgEAttrAddFlags.eAddFlagNone);
            }

            Debug.WriteLine(m_DisplayName + ".GetPluginConfig()", "Exited:");

            return m_AgAttrScope;
        }

        public void VerifyPluginConfig(AgUtPluginConfigVerifyResult pPluginCfgResult)
        {
            Debug.WriteLine(m_DisplayName + ".VerifyPluginConfig()", "Entered:");

            pPluginCfgResult.Result = true;
            pPluginCfgResult.Message = "Ok";

            Debug.WriteLine(m_DisplayName + ".VerifyPluginConfig()", "Exited:");
        }

        #region Registration functions
        /// <summary>
        /// Called when the assembly is registered for use from COM.
        /// </summary>
        /// <param name="t">The type being exposed to COM.</param>
        [ComRegisterFunction]
        [ComVisible(false)]
        public static void RegisterFunction(Type t)
        {
            RemoveOtherVersions(t);
        }

        /// <summary>
        /// Called when the assembly is unregistered for use from COM.
        /// </summary>
        /// <param name="t">The type exposed to COM.</param>
        [ComUnregisterFunctionAttribute]
        [ComVisible(false)]
        public static void UnregisterFunction(Type t)
        {
            // Do nothing.
        }

        /// <summary>
        /// Called when the assembly is registered for use from COM.
        /// Eliminates the other versions present in the registry for
        /// this type.
        /// </summary>
        /// <param name="t">The type being exposed to COM.</param>
        public static void RemoveOtherVersions(Type t)
        {
            try
            {
                using (RegistryKey clsidKey = Registry.ClassesRoot.OpenSubKey("CLSID"))
                {
                    StringBuilder guidString = new StringBuilder("{");
                    guidString.Append(t.GUID.ToString());
                    guidString.Append("}");
                    using (RegistryKey guidKey = clsidKey.OpenSubKey(guidString.ToString()))
                    {
                        if (guidKey != null)
                        {
                            using (RegistryKey inproc32Key = guidKey.OpenSubKey("InprocServer32", true))
                            {
                                if (inproc32Key != null)
                                {
                                    string currentVersion = t.Assembly.GetName().Version.ToString();
                                    string[] subKeyNames = inproc32Key.GetSubKeyNames();
                                    if (subKeyNames.Length > 1)
                                    {
                                        foreach (string subKeyName in subKeyNames)
                                        {
                                            if (subKeyName != currentVersion)
                                            {
                                                inproc32Key.DeleteSubKey(subKeyName);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch
            {
                // Ignore all exceptions...
            }
        }
        #endregion
    }
}
