using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using AGI.Attr;
using AGI.Plugin;
using AGI.STK.Plugin;
using AGI.STKObjects;
using AGI.VectorGeometryTool.Plugin;

namespace Agi.VGT.Point.Plugin.Examples.CSharp
{
    // NOTE: Generate your own Guid using Microsoft's GuidGen.exe
	[Guid("C09E1112-D557-438b-AEA2-57BBD6DC8080")]
    // NOTE: Create your own ProgId to match your plugin's namespace and name
    [ProgId("Agi.VGT.Point.Plugin.Examples.CSharp.Example1")]
    // NOTE: Specify the ClassInterfaceType.None enumeration, so the custom COM Interface 
    // you created is used instead of an autogenerated COM Interface.
    [ClassInterface(ClassInterfaceType.None)]
    public class Example1 :
        IExample1,
        IAgCrdnPointPlugin,
        IAgUtPluginConfig
    {
        private string m_DisplayName = "CSharp.PointExample";
        private AgStkPluginSite m_Site;
        private AgStkObjectRoot m_StkRootObject;

        private object m_AgAttrScope;

        private AgCrdnPluginCalcProvider m_CalcToolProvider;
        private AgCrdnPluginProvider m_VectorToolProvider;
        private AgCrdnConfiguredPoint m_objectConfiguredPoint;

        public double MyDouble { get; set; }
        public string MyString { get; set; }

        public bool Init(IAgUtPluginSite Site)
        {
            Debug.WriteLine(m_DisplayName + ".Init()", "Entered:");

            m_Site = (AgStkPluginSite)Site;

            if (m_Site != null)
            {
                // Get a pointer to the STK Object Model root object
                m_StkRootObject = (AgStkObjectRoot)m_Site.StkRootObject;
            }

            Debug.WriteLine(m_DisplayName + ".Init()", "Exited:");

            return true;
        }

        public void Register(AgCrdnPointPluginResultReg Result)
        {
            Debug.WriteLine(m_DisplayName + ".Register()", "Entered:");

            string objPath = "[" + Result.ObjectPath + "]";

            Result.ShortDescription = "Test short Desc: Component created using " + m_DisplayName + " " + objPath;
            Result.LongDescription = "Test long Desc: Component created using " + m_DisplayName + " " + objPath;

            string oPath = Result.ObjectPath;
            string parentPath = Result.ParentPath;
            string grandParentPath = Result.GrandParentPath;

            Debug.WriteLine(objPath + " Register() [objPath=" + oPath + "] [parentPath=" + parentPath + "] [grandParentPath=" + grandParentPath + "]");

            Result.SetRefSystem("Body", "<MyObject>");

            Debug.WriteLine(m_DisplayName + ".Register()", "Exited:");
        }

        public bool Evaluate(AgCrdnPointPluginResultEval Result)
        {
            if (m_objectConfiguredPoint != null)
            {
                double x = 0;
                double y = 0;
                double z = 0;
                m_objectConfiguredPoint.CurrentValue(Result, ref x, ref y, ref z);

                // For this example, the point is the detic point divided by two.
                Result.SetPosition(x / 2.0, y / 2.0, z / 2.0);
            }

            return true;
        }

        public void Free()
        {
            Debug.WriteLine(m_DisplayName + ".Free()", "Entered:");

            m_Site = null;
            m_StkRootObject = null;
            m_CalcToolProvider = null;
            m_VectorToolProvider = null;
            m_objectConfiguredPoint = null;

            Debug.WriteLine(m_DisplayName + ".Free()", "Exited:");
        }

        public bool Reset(AgCrdnPointPluginResultReset Result)
        {
            Debug.WriteLine(m_DisplayName + ".Reset()", "Entered:");

            m_CalcToolProvider = Result.CalcToolProvider;
            m_VectorToolProvider = Result.VectorToolProvider;

            m_objectConfiguredPoint = m_VectorToolProvider.ConfigurePoint("SubPoint(Detic)", "<MyObject>", "Body", "<MyObject>");

            Debug.WriteLine(m_DisplayName + ".Reset()", "Exited:");

            return true;
        }

        public object GetPluginConfig(AGI.Attr.AgAttrBuilder pAttrBuilder)
        {
            Debug.WriteLine(m_DisplayName + ".GetPluginConfig()", "Entered:");

            if (m_AgAttrScope == null)
            {
                m_AgAttrScope = pAttrBuilder.NewScope();

                pAttrBuilder.AddStringDispatchProperty(m_AgAttrScope, "MyString", "A string", "MyString", (int)AgEAttrAddFlags.eAddFlagReadOnly);
                pAttrBuilder.AddDoubleDispatchProperty(m_AgAttrScope, "MyDouble", "A double", "MyDouble", (int)AgEAttrAddFlags.eAddFlagNone);
            }

            Debug.WriteLine(m_DisplayName + ".GetPluginConfig()", "Exited:");

            return m_AgAttrScope;
        }

        public void VerifyPluginConfig(AgUtPluginConfigVerifyResult pPluginCfgResult)
        {
            Debug.WriteLine(m_DisplayName + ".VerifyPluginConfig()", "Entered:");

            pPluginCfgResult.Result = true;
            pPluginCfgResult.Message = "Ok";

            Debug.WriteLine(m_DisplayName + ".VerifyPluginConfig()", "Exited:");
        }
    }
}
