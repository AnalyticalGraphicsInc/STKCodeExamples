using AGI.Attr;
using AGI.Hpop.Plugin;
using AGI.Plugin;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace AGI.Density.Exponential.CSharp.Example
{
    public interface IDensityExponentialExample
    {
        string CentralBodyName { get; set; }
        double RefDensity { get; set; }
        double RefAltitude { get; set; }
        double ScaleAltitude { get; set; }
        double LowestValidAlt { get; set; }
        int MaxScaleHeights { get; set; }
        bool DebugMode { get; set; }
        bool PluginEnabled { get; set; }
        int MessageInterval { get; set; }
    }

    /// <summary>
    /// DensityExponentialExample uses TBD
    /// </summary>
    // NOTE: Generate your own Guid using Microsoft's GuidGen.exe
    [Guid("1116EF84-CF4C-429B-82B7-2B51600B408A")]
    // NOTE: Create your own ProgId to match your plugin's namespace and name
    [ProgId("AGI.Density.Exponential.CSharp")]
    // NOTE: Specify the ClassInterfaceType.None enumeration, so the custom COM Interface 
    // you created is used instead of an autogenerated COM Interface.
    [ClassInterface(ClassInterfaceType.None)]
    public class DensityExponentialExample : IDensityExponentialExample, IAgAsDensityModelPlugin, IAgUtPluginConfig
    {
        private bool _computesTemperature = false;
        private bool _computesPressure   = false;

        private double _Density = double.NaN;

        private bool _outputLowAltMsg = true;
        private bool _outputMaxHeightMsg = true;
        private int _MsgCntr = -1;

        #region IDensityExponentialExample Implementation 

        private string _cbName = "Earth";

        public string CentralBodyName
        {
            get
            {
                return _cbName;
            }
            set
            {
                _cbName = value;
            }
        }

        private double _RefDensity = 1.784e-11;        // kg/m^3
        public double RefDensity
        {
            get
            {
                return _RefDensity;
            }
            set
            {
                _RefDensity = value;
            }
        }

        private double _RefAltitude = 300.0 * 1000.0;	// meters;
        public double RefAltitude
        {
            get
            {
                return _RefAltitude;
            }
            set
            {
                _RefAltitude = value;
            }
        }

        private double _ScaleAltitude = 20.0 * 1000.0;	// meters
        public double ScaleAltitude
        {
            get
            {
                return _ScaleAltitude;
            }
            set
            {
                _ScaleAltitude = value;
            }
        }

        private double _LowestValidAlt = 90.0 * 1000.0;	// meters
        public double LowestValidAlt
        {
            get
            {
                return _LowestValidAlt;
            }
            set
            {
                _LowestValidAlt = value;
            }
        }

        private int _MaxScaleHeights = 7;
        public int MaxScaleHeights
        {
            get
            {
                return _MaxScaleHeights;
            }
            set
            {
                _MaxScaleHeights = value;
            }
        }

        private bool _DebugMode = false;
        public bool DebugMode
        {
            get
            {
                return _DebugMode;
            }
            set
            {
                _DebugMode = value;
            }
        }

        private bool _Enabled = true;
        public bool PluginEnabled
        {
            get
            {
                return _Enabled;
            }
            set
            {
                _Enabled = value;
            }
        }

        private int _MessageInterval = 500;
        public int MessageInterval
        {
            get
            {
                return _MessageInterval;
            }
            set
            {
                _MessageInterval = value;
            }
        }

        #endregion IDensityExponentialExample Implementation

        #region IAgUtPluginConfig Implementation 

        private object _oPluginConfig = null;

        public object GetPluginConfig(AGI.Attr.AgAttrBuilder pAttrBuilder)
        {
            Message(AgEUtLogMsgType.eUtLogMsgDebug, "DensityExponentialExample:GetPluginConfig()");

            if (_oPluginConfig == null)
            {
                int eFlagNone = (int)AgEAttrAddFlags.eAddFlagNone;

                _oPluginConfig = pAttrBuilder.NewScope();

                pAttrBuilder.AddStringDispatchProperty(_oPluginConfig,
                    "CentralBodyName",
                    "CentralBody Name",
                    "CentralBodyName", eFlagNone);

                pAttrBuilder.AddDoubleDispatchProperty(_oPluginConfig,
                    "RefDensity",
                    "Reference Density",
                    "RefDensity", eFlagNone);

                pAttrBuilder.AddQuantityMinDispatchProperty2(_oPluginConfig,
                    "RefAltitude",
                    "Reference Altitude",
                    "RefAltitude",
                    "DistanceUnit", "Kilometers", "Meters", 0.0, eFlagNone);

                pAttrBuilder.AddQuantityMinDispatchProperty2(_oPluginConfig,
                    "ScaleAltitude",
                    "Scale Altitude",
                    "ScaleAltitude",
                    "DistanceUnit", "Kilometers", "Meters", 0.0, eFlagNone);

                pAttrBuilder.AddQuantityMinDispatchProperty2(_oPluginConfig,
                    "LowestValidAlt",
                    "Lowest Valid Altitude",
                    "LowestValidAlt",
                    "DistanceUnit", "Kilometers", "Meters", 0.0, eFlagNone);

                pAttrBuilder.AddIntDispatchProperty(_oPluginConfig,
                    "MaxScaleHeights",
                    "Max number of scale heights to allow",
                    "MaxScaleHeights", eFlagNone);

                /*
                 * General Plugin attributes
                 */
                pAttrBuilder.AddBoolDispatchProperty(_oPluginConfig,
                    "PluginEnabled",
                    "If the plugin is enabled or has experienced an error",
                    "PluginEnabled", eFlagNone);

                pAttrBuilder.AddBoolDispatchProperty(_oPluginConfig,
                    "DebugMode",
                    "Turn debug messages on or off",
                    "DebugMode",  eFlagNone);

                pAttrBuilder.AddIntDispatchProperty(_oPluginConfig,
                    "MessageInterval",
                    "The interval at which to send messages during propagation in Debug mode",
                    "MessageInterval", eFlagNone);
            }

            return _oPluginConfig;
        }

        public void VerifyPluginConfig(AgUtPluginConfigVerifyResult pPluginCfgResult)
        {
            Message(AgEUtLogMsgType.eUtLogMsgDebug, "DensityExponentialExample:VerifyPluginConfig()");

            pPluginCfgResult.Result = true;
            pPluginCfgResult.Message = "OK";
        }

        #endregion IAgUtPluginConfig Implementation 

        #region IAgAsDensityModelPlugin Implementation 

        private IAgUtPluginSite _AgUtPluginSite = null;


        public void Register(AgAsDensityModelResultRegister Result)
        {
            if (_DebugMode)
            {
                Result.Message(AgEUtLogMsgType.eUtLogMsgDebug, "DensityExponentialExample:Register()");
            }
        }

        public bool Init(IAgUtPluginSite Site)
        {
            if (_DebugMode)
            {
                Message(AgEUtLogMsgType.eUtLogMsgDebug, "DensityExponentialExample:Init()");
            }

            if (Site != null)
            {
                _AgUtPluginSite = Site;
                if (_DebugMode)
                {
                    if (_Enabled)
                    {
                        Message(AgEUtLogMsgType.eUtLogMsgInfo, "DensityExponentialExample:Init(): Enabled");
                    }
                    else
                    {
                        Message(AgEUtLogMsgType.eUtLogMsgInfo, "DensityExponentialExample:Init(): Disabled because Enabled flag is False");
                    }
                }
                else if (!_Enabled)
                {
                    Message(AgEUtLogMsgType.eUtLogMsgAlarm, "DensityExponentialExample:Init(): Disabled because Enabled flag is False");
                }
            }
            else
            {
                Message(AgEUtLogMsgType.eUtLogMsgAlarm, "DensityExponentialExample:Init(): Forcing Disabled because Plugin Site was null!");

                _Enabled = false;
            }

            _outputLowAltMsg = true;
            _outputMaxHeightMsg = true;
            _MsgCntr = -1;

            return _Enabled;
        }

        public void Free()
        {
            if (_DebugMode)
            {
                Message(AgEUtLogMsgType.eUtLogMsgDebug, "DensityExponentialExample:Free()");
            }

            _AgUtPluginSite = null;
        }

        public bool Evaluate(AgAsDensityModelResultEval ResultEval)
        {
            _MsgCntr++;
            if (_Enabled && (ResultEval != null))
            {
                _Enabled = SetDensity(ResultEval);
            }

            return _Enabled;
        }

        public string CentralBody()
        {
            return _cbName;
        }

        public bool ComputesTemperature()
        {
            return _computesTemperature;
        }

        public bool ComputesPressure()
        {
            return _computesPressure;
        }

        public bool UsesAugmentedSpaceWeather()
        {
            return false;
        }

        public void AtmFluxLags(ref double F10p7Lag, ref double F10p7MeanLag, ref double GeoFluxLag)
        { }

        public void AugmentedAtmFluxLags(ref double M10p7Lag, ref double M10p7MeanLag, ref double S10p7Lag, ref double S10p7MeanLag, ref double Y10p7Lag, ref double Y10p7MeanLag, ref double DstDTcLag)
        { }

        public double GetLowestValidAltitude()
        {
            return _LowestValidAlt;
        }

        #endregion IAgAsDensityModelPlugin Implementation 


        private bool SetDensity(AgAsDensityModelResultEval result)
        {
            bool enabled = false;
            double altitude = result.Altitude;
            if (!Double.IsNaN(altitude))
            {
                if(altitude < _LowestValidAlt)
                {
                    if(_outputLowAltMsg)
                    {
                        double altKm = altitude / 1000.0;
                        double lowestValidAltKm = -LowestValidAlt / 1000.0;

                        string msg = "setDensity: altitude " + altKm.ToString("0.###") + " is less than minimum valid altitude ( " +
                            lowestValidAltKm.ToString("0.###") + " km). Keeping density constant below this height.";

                        Message(AgEUtLogMsgType.eUtLogMsgWarning, msg);

                        _outputLowAltMsg = false;
                    }

                    altitude = _LowestValidAlt;
                }

                double diffAlt = _RefAltitude - altitude;
                double expArg = diffAlt / _ScaleAltitude;

                if(_DebugMode)
                {
                    double altKm = altitude / 1000.0;
                    string msg = "setDensity: alt= " + altKm.ToString("0.###") + ", expArg = " + expArg.ToString("0.###");
                    DebugMessage(msg);
                }

                if(expArg < 700.0)
                {
                    _Density = 0.0;
                }
                else
                {
                    if(expArg > _MaxScaleHeights)
                    {
                        if(_outputMaxHeightMsg)
                        {
                            double altKm = altitude / 1000.0;
                            string msg = "setDensity: scaleHeight " + expArg.ToString("0.###") + " exceeds maximum allowed ( " + 
                                _MaxScaleHeights.ToString() + "), alt= " + altKm.ToString("0.###") + " km. Keeping density constant at maxScaleHeight.";
                            Message(AgEUtLogMsgType.eUtLogMsgAlarm, msg);

                            _outputMaxHeightMsg = false;
                        }

                        expArg = _MaxScaleHeights;
                    }

                    _Density = _RefDensity * Math.Exp(expArg);
                }

                if (!Double.IsNaN(_Density))
                {
			        result.SetDensity(_Density);
                    enabled = true;
                }
            }

            return enabled;
        }

        private void Message(AgEUtLogMsgType msgType, String msg)
        {
            if ((msgType == AgEUtLogMsgType.eUtLogMsgDebug)
                && (!_DebugMode))
            {
                return;
            }

            if (_AgUtPluginSite != null)
            {
                _AgUtPluginSite.Message(msgType, msg);
            }
        }

        private void DebugMessage(String msg)
        {
            if (_DebugMode)
            {
                if (_MsgCntr % _MessageInterval == 0)
                {
                    Message(AgEUtLogMsgType.eUtLogMsgDebug, msg);
                }
            }
        }
    }
}
