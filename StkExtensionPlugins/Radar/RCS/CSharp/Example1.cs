using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.InteropServices;
using AGI.Radar.Plugin;
using AGI.Plugin;
using AGI.VectorGeometryTool.Plugin;
using AGI.CommRdrFoundation;
using AGI.STK.Plugin;
using Microsoft.Win32;

namespace Agi.Radar.RCS.CSharp.Example
{
    // NOTE: Generate your own Guid using Microsoft's GuidGen.exe
    [Guid("91711DB6-84B2-4c2d-B2EE-0CA8786204C2")]
    // NOTE: Create your own ProgId to match your plugin's namespace and name
    [ProgId("Agi.Radar.RCS.CSharp.Example1")]
    // NOTE: Specify the ClassInterfaceType.None enumeration, so the custom COM Interface 
    // you created is used instead of an autogenerated COM Interface.
    [ClassInterface(ClassInterfaceType.None)]
    public class Example1 : IExample1, IAgStkRadarRcsPlugin, IAgUtPluginConfig
    {
        object m_attrScope;
        double m_constantRCS;
        bool m_enablePolarizaton;
        IAgStkPluginSite m_stkPluginSite;
        IAgCrdnPluginProvider m_vectorToolProvider;
        IAgCrdnPluginCalcProvider m_calcToolProvider;

        public Example1()
        {
            ConstantRCS = 1.0;
            EnablePolarization = false;
        }

        #region IExample1 Members

        public double ConstantRCS
        {
            get
            {
                return m_constantRCS;
            }
            set
            {
                m_constantRCS = value;
            }
        }

        public bool EnablePolarization
        {
            get
            {
                return m_enablePolarizaton;
            }
            set
            {
                m_enablePolarizaton = value;
            }
        }

        #endregion

        #region IAgUtPluginConfig Members

        public object GetPluginConfig(AGI.Attr.AgAttrBuilder pAttrBuilder)
        {
            if (m_attrScope == null)
            {
                m_attrScope = pAttrBuilder.NewScope();
                pAttrBuilder.AddQuantityDispatchProperty2(m_attrScope, "ConstantRCS", "ConstantRCS", "ConstantRCS", "Rcs", "dBsm", "sqm", 0);
                pAttrBuilder.AddBoolDispatchProperty(m_attrScope, "EnablePolarization", "EnablePolarization", "EnablePolarization", 0);
            }
            return m_attrScope;
        }

        public void VerifyPluginConfig(AgUtPluginConfigVerifyResult pPluginCfgResult)
        {
            pPluginCfgResult.Result = true;
            pPluginCfgResult.Message = "Ok";
        }

        #endregion

        #region IAgStkRadarRcsPlugin Members

        public void Compute(IAgStkRadarRcsComputeParams computeRcsParams)
        {
            computeRcsParams.PrimaryChannelRcs = ConstantRCS;
            computeRcsParams.PrimaryChannelRcsCross = 1.0e-20;
            computeRcsParams.OrthoChannelRcs = ConstantRCS;
            computeRcsParams.OrthoChannelRcsCross = 1.0e-20;
        }

        public void Free()
        {
        }

        public void Initialize(IAgUtPluginSite site)
        {
            m_stkPluginSite = site as IAgStkPluginSite;
            if (m_stkPluginSite != null)
            {
                m_vectorToolProvider = m_stkPluginSite.VectorToolProvider;
                m_calcToolProvider = m_stkPluginSite.CalcToolProvider;
            }
        }

        public bool IsDynamic
        {
            get { return false; }
        }

        public void PostCompute()
        {
        }

        public bool PreCompute()
        {
            return true;
        }

        public void ProcessSignals(IAgStkRadarRcsProcessSignalsParams processSignalsParams)
        {
            IAgCRSignal primPolSignal = processSignalsParams.PrimaryPolChannelSignal;
            primPolSignal.Power *= ConstantRCS;

            IAgStkRadarSignal primRdrSignal = primPolSignal as IAgStkRadarSignal;
            if (primRdrSignal != null)
                primRdrSignal.Rcs = ConstantRCS;

            IAgCRPolarization primPol = primPolSignal.Polarization;
            if (primPol != null)
            {
                IAgCRPolarization primOrthPol = null;
                if (EnablePolarization)
                {
                    primOrthPol = processSignalsParams.ConstructOrthogonalPolarization(primPol);
                }
                primPolSignal.Polarization = primOrthPol;
            }

            IAgCRSignal orthPolSignal = processSignalsParams.OrthoPolChannelSignal;
            if (orthPolSignal != null)
            {
                orthPolSignal.Power *= ConstantRCS;

                IAgStkRadarSignal orthRdrSignal = orthPolSignal as IAgStkRadarSignal;
                if (orthRdrSignal != null)
                    orthRdrSignal.Rcs = ConstantRCS;

                IAgCRPolarization orthPol = orthPolSignal.Polarization;
                if (orthPol != null)
                {
                    IAgCRPolarization orthOrthPol = null;
                    if (EnablePolarization)
                    {
                        orthOrthPol = processSignalsParams.ConstructOrthogonalPolarization(orthPol);
                    }
                    orthPolSignal.Polarization = orthOrthPol;
                }
            }
        }

        #endregion

        #region Registration functions
        /// <summary>
        /// Called when the assembly is registered for use from COM.
        /// </summary>
        /// <param name="t">The type being exposed to COM.</param>
        [ComRegisterFunction]
        [ComVisible(false)]
        public static void RegisterFunction(Type t)
        {
            RemoveOtherVersions(t);
        }

        /// <summary>
        /// Called when the assembly is unregistered for use from COM.
        /// </summary>
        /// <param name="t">The type exposed to COM.</param>
        [ComUnregisterFunctionAttribute]
        [ComVisible(false)]
        public static void UnregisterFunction(Type t)
        {
            // Do nothing.
        }

        /// <summary>
        /// Called when the assembly is registered for use from COM.
        /// Eliminates the other versions present in the registry for
        /// this type.
        /// </summary>
        /// <param name="t">The type being exposed to COM.</param>
        public static void RemoveOtherVersions(Type t)
        {
            try
            {
                using (RegistryKey clsidKey = Registry.ClassesRoot.OpenSubKey("CLSID"))
                {
                    StringBuilder guidString = new StringBuilder("{");
                    guidString.Append(t.GUID.ToString());
                    guidString.Append("}");
                    using (RegistryKey guidKey = clsidKey.OpenSubKey(guidString.ToString()))
                    {
                        if (guidKey != null)
                        {
                            using (RegistryKey inproc32Key = guidKey.OpenSubKey("InprocServer32", true))
                            {
                                if (inproc32Key != null)
                                {
                                    string currentVersion = t.Assembly.GetName().Version.ToString();
                                    string[] subKeyNames = inproc32Key.GetSubKeyNames();
                                    if (subKeyNames.Length > 1)
                                    {
                                        foreach (string subKeyName in subKeyNames)
                                        {
                                            if (subKeyName != currentVersion)
                                            {
                                                inproc32Key.DeleteSubKey(subKeyName);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch
            {
                // Ignore all exceptions...
            }
        }
        #endregion
    }
}
