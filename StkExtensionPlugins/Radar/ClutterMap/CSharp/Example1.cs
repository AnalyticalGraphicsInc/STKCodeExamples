using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.InteropServices;
using AGI.CommRdrFoundation;
using AGI.Radar.Plugin;
using AGI.VectorGeometryTool.Plugin;
using AGI.Plugin;
using AGI.STK.Plugin;
using Microsoft.Win32;

namespace Agi.Radar.ClutterMap.CSharp.Example
{
    // NOTE: Generate your own Guid using Microsoft's GuidGen.exe
    [Guid("C294177D-33D7-4df7-823E-2D49DF135FD9")]
    // NOTE: Create your own ProgId to match your plugin's namespace and name
    [ProgId("Agi.Radar.ClutterMap.CSharp.Example1")]
    // NOTE: Specify the ClassInterfaceType.None enumeration, so the custom COM Interface 
    // you created is used instead of an autogenerated COM Interface.
    [ClassInterface(ClassInterfaceType.None)]
    public class Example1 : IExample1, IAgStkRadarClutterMapPlugin, IAgUtPluginConfig
    {
        object m_attrScope;
        double m_constantCoeff;
        bool m_applyGrazeMask;
        double m_halfPi;
        IAgStkPluginSite m_stkPluginSite;
        IAgCrdnPluginProvider m_vectorToolProvider;
        IAgCrdnPluginCalcProvider m_calcToolProvider;

        public Example1()
        {
            ConstantCoefficient = 1.0;
            ApplyGrazingMask = false;
            m_halfPi = 1.5707963267948966192;
        }

        #region IExample1 Members

        public double ConstantCoefficient
        {
            get
            {
                return m_constantCoeff;
            }
            set
            {
                m_constantCoeff = value;
            }
        }

        public bool ApplyGrazingMask
        {
            get
            {
                return m_applyGrazeMask;
            }
            set
            {
                m_applyGrazeMask = value;
            }
        }

        #endregion

        #region IAgUtPluginConfig Members

        public object GetPluginConfig(AGI.Attr.AgAttrBuilder pAttrBuilder)
        {
            if (m_attrScope == null)
            {
                m_attrScope = pAttrBuilder.NewScope();
                pAttrBuilder.AddQuantityDispatchProperty2(m_attrScope, "ConstantCoefficient", "ConstantCoefficient", "ConstantCoefficient", "Ratio", "dB", "units", 0);
                pAttrBuilder.AddBoolDispatchProperty(m_attrScope, "ApplyGrazingMask", "ApplyGrazingMask", "ApplyGrazingMask", 0);
            }
            return m_attrScope;
        }

        public void VerifyPluginConfig(AgUtPluginConfigVerifyResult pPluginCfgResult)
        {
            pPluginCfgResult.Result = true;
            pPluginCfgResult.Message = "Ok";
        }

        #endregion

        #region IAgStkRadarClutterMapPlugin Members

        public void Compute(IAgStkRadarClutterMapComputeParams computeParams)
        {
            IAgCRSignal signal = computeParams.Signal;
            IAgStkRadarClutterPatch clutterPatch = computeParams.ClutterPatch;

            double signalPower = signal.Power;
            double patchArea = clutterPatch.Area;

            double patchClutterCoeff = ConstantCoefficient;
            if(ApplyGrazingMask)
            {
                IAgStkRadarPosVelProvider patchPosVel = clutterPatch.PosVelProvider;

                CartVec patchPosCBF = new CartVec(patchPosVel.PositionCBFArray);

                IAgStkRadarLink radarLink = computeParams.RadarLink;
                IAgStkRadarLinkGeometry radarLinkGeom = radarLink.Geometry;
                IAgStkRadarPosVelProvider rdrRcvrPosVel = radarLinkGeom.ReceiveRadarPosVelProvider;

                CartVec rcvRdrPosCBF =  new CartVec(rdrRcvrPosVel.PositionCBFArray);
                CartVec relPosCbf = patchPosCBF - rcvRdrPosCBF;

                CartVec surfaceNorm = new CartVec(patchPosVel.SurfaceNormalDeticArray);

                double grazingAngle = m_halfPi - CartVec.AngleBetween(surfaceNorm, relPosCbf);
                if(grazingAngle < 0.0)
                    grazingAngle = m_halfPi;

                patchClutterCoeff = patchClutterCoeff * (grazingAngle / m_halfPi);
            }

            signal.Power += patchClutterCoeff * patchArea;

            IAgCRPolarization signalPol = signal.Polarization;
            if(signalPol != null)
            {
                signal.Polarization = computeParams.ConstructOrthogonalPolarization(signalPol);
            }
        }

        public void Free()
        {
        }

        public void Initialize(IAgUtPluginSite site)
        {
            m_stkPluginSite = site as IAgStkPluginSite;
            if (m_stkPluginSite != null)
            {
                m_vectorToolProvider = m_stkPluginSite.VectorToolProvider;
                m_calcToolProvider = m_stkPluginSite.CalcToolProvider;
            }
        }

        public void PostCompute()
        {
        }

        public bool PreCompute()
        {
            return true;
        }

        #endregion

        struct CartVec
        {
            double m_x;
            double m_y;
            double m_z;

            public CartVec(Array values)
            {
                m_x = (double)values.GetValue(0);
                m_y = (double)values.GetValue(1);
                m_z = (double)values.GetValue(2);
            }

            public double X { get { return m_x; } set { m_x = value; } }
            public double Y { get { return m_y; } set { m_y = value; } }
            public double Z { get { return m_z; } set { m_z = value; } }

            public static CartVec operator-(CartVec lhs, CartVec rhs)
            {
                CartVec result = new CartVec();
                result.X = lhs.X - rhs.X;
                result.Y = lhs.Y - rhs.Y;
                result.Z = lhs.Z - rhs.Z;
                return result;
            }

            public CartVec Cross(CartVec rhs)
            {
                CartVec result = new CartVec();
                result.X = m_y * rhs.Z - m_z * rhs.Y;
                result.Y = m_z * rhs.X - m_x * rhs.Z;
                result.Z = m_x * rhs.Y - m_y * rhs.X;
                return result;
            }

            public double Mag()
            {
                return Math.Sqrt(m_x * m_x + m_y * m_y + m_z * m_z);
            }

            public double Dot(CartVec rhs)
            {
                return m_x * rhs.X + m_y * rhs.Y + m_z * rhs.Z;
            }

            public static double AngleBetween(CartVec lhs, CartVec rhs)
            {
                CartVec cross = lhs.Cross(rhs);
                double sinTheta = cross.Mag();
                double cosTheta = lhs.Dot(rhs);
                return Math.Abs(Math.Atan2(sinTheta, cosTheta));
            }
        }

        #region Registration functions
        /// <summary>
        /// Called when the assembly is registered for use from COM.
        /// </summary>
        /// <param name="t">The type being exposed to COM.</param>
        [ComRegisterFunction]
        [ComVisible(false)]
        public static void RegisterFunction(Type t)
        {
            RemoveOtherVersions(t);
        }

        /// <summary>
        /// Called when the assembly is unregistered for use from COM.
        /// </summary>
        /// <param name="t">The type exposed to COM.</param>
        [ComUnregisterFunctionAttribute]
        [ComVisible(false)]
        public static void UnregisterFunction(Type t)
        {
            // Do nothing.
        }

        /// <summary>
        /// Called when the assembly is registered for use from COM.
        /// Eliminates the other versions present in the registry for
        /// this type.
        /// </summary>
        /// <param name="t">The type being exposed to COM.</param>
        public static void RemoveOtherVersions(Type t)
        {
            try
            {
                using (RegistryKey clsidKey = Registry.ClassesRoot.OpenSubKey("CLSID"))
                {
                    StringBuilder guidString = new StringBuilder("{");
                    guidString.Append(t.GUID.ToString());
                    guidString.Append("}");
                    using (RegistryKey guidKey = clsidKey.OpenSubKey(guidString.ToString()))
                    {
                        if (guidKey != null)
                        {
                            using (RegistryKey inproc32Key = guidKey.OpenSubKey("InprocServer32", true))
                            {
                                if (inproc32Key != null)
                                {
                                    string currentVersion = t.Assembly.GetName().Version.ToString();
                                    string[] subKeyNames = inproc32Key.GetSubKeyNames();
                                    if (subKeyNames.Length > 1)
                                    {
                                        foreach (string subKeyName in subKeyNames)
                                        {
                                            if (subKeyName != currentVersion)
                                            {
                                                inproc32Key.DeleteSubKey(subKeyName);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch
            {
                // Ignore all exceptions...
            }
        }
        #endregion
    }
}
