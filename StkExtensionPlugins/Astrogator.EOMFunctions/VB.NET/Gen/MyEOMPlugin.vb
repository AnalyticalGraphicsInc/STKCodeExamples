'//=====================================================//
'//  Copyright 2009, Analytical Graphics, Inc.          //
'//=====================================================//

Option Strict On
Imports System.EnterpriseServices
Imports System.Runtime.InteropServices
Imports Microsoft.Win32.RegistryKey

Imports AGI.Attr
Imports AGI.Plugin
Imports AGI.Hpop.Plugin
Imports AGI.VectorGeometryTool.Plugin
Imports AGI.STK.Plugin

' NOTE: Generate your own Guid using Microsoft's GuidGen.exe
    ' NOTE: Create your own ProgId to match your plugin's namespace and name
    ' NOTE: Specify the ClassInterfaceType.None enumeration, so the custom COM Interface 
    ' you created, i.e. IExample1, is used instead of an autogenerated COM Interface.
<JustInTimeActivation(True), _
GuidAttribute("A43B111B-8663-4741-AE4F-0446520A101A"), _
ProgId("AGI.EOMFunc.Plugin.Examples.Stk.VB_NET.MyEOMFunc"), _
ClassInterface(ClassInterfaceType.None)> _
Public Class MyEOMPlugin
    Implements IMyEOMPlugin
    Implements IAgAsEOMFuncPlugin
    Implements IAgUtPluginConfig

#Region "Plugin Private Data Members"

    Private m_UPS As IAgUtPluginSite
    Private m_SPS As IAgStkPluginSite
    Private m_CPP As IAgCrdnPluginProvider
    Private m_CCA As IAgCrdnConfiguredAxes
    Private m_Scope As Object

    Private m_thrustXIndex As Integer
    Private m_thrustYIndex As Integer
    Private m_thrustZIndex As Integer
    Private m_massIndex As Integer

    Private m_effectiveImpulseIndex As Integer
    Private m_integratedDeltaVxIndex As Integer
    Private m_integratedDeltaVyIndex As Integer
    Private m_integratedDeltaVzIndex As Integer


#End Region

#Region "Life Cycle Methods"

    ' Default constructor.
    Public Sub New()
        MyBase.New()

        m_UPS = Nothing
        m_Scope = Nothing

        Call SetAttributeConfigDefaults()

    End Sub

    '/// <summary>
    '/// Initializes the Plugin Attribute configuration 
    '/// Data Members to their defaults
    '/// </summary>
    Public Sub SetAttributeConfigDefaults()
        '/===========================
        '// General Plugin attributes
        '//===========================

        m_Name = "VB_Net.Example1"
        m_deltaVAxes = "VNC(Earth)"

    End Sub

#End Region

#Region "IMyEOMPlugin Interface Implementation"
    '//=============================================
    '// Plugin Attributes to be configured
    '// will be exposed via .NET properties
    '// and using the Attribute Builder reference
    '// passed as a parameter to the GetPluginConfig
    '// Method.
    '//==============================================

    Private m_Name As String                    'Plugin Significant
    Private m_deltaVAxes As String                'Plugin Significant

    Public ReadOnly Property Name() As String Implements IAgAsEOMFuncPlugin.Name
        Get
            Return m_Name
        End Get
    End Property

    Public Property DeltaVAxes() As String Implements IMyEOMPlugin.DeltaVAxes
        Get
            Return m_DeltaVAxes
        End Get
        Set(ByVal value As String)
            m_deltaVAxes = value
        End Set
    End Property

#End Region

#Region "IAgAsEOPPlugin Interface Implementation"

    Public Function Init(ByVal Ups As IAgUtPluginSite) As Boolean Implements IAgAsEOMFuncPlugin.Init

        Dim ret As Boolean

        ret = False

        Try

            m_UPS = Ups

            If (Not m_UPS Is Nothing And IsReference(m_UPS)) Then

                Try
                    m_SPS = DirectCast(m_UPS, IAgStkPluginSite)
                Catch
                    ' failure indicates that m_UPS can't be cast to IAgStkPluginSite
                    m_SPS = Nothing
                End Try

                If (Not m_SPS Is Nothing) Then

                    If (IsReference(m_SPS)) Then
                        m_CPP = m_SPS.VectorToolProvider
                        If (Not m_CPP Is Nothing And IsReference(m_CPP)) Then
                            m_CCA = m_CPP.ConfigureAxes("ICRF", "CentralBody/Earth", m_deltaVAxes, "")

                            If (Not m_CCA Is Nothing And IsReference(m_CCA)) Then
                                ret = True
                            End If
                        End If
                    End If

                End If

            Else
                Throw New Exception("UtPluginSite was null")

            End If

        Catch ex As Exception
            ret = False

            If (Not m_UPS Is Nothing And IsReference(m_UPS)) Then
                m_UPS.Message(AgEUtLogMsgType.eUtLogMsgAlarm, m_Name & ".Init(): Exception Message( " & ex.Message & " )")
                m_UPS.Message(AgEUtLogMsgType.eUtLogMsgAlarm, m_Name & ".Init(): Exception StackTr( " & ex.StackTrace & " )")
            End If
        End Try

        Init = ret
    End Function

    Public Function Register(ByVal RegisterHandler As AgAsEOMFuncPluginRegisterHandler) As Boolean Implements IAgAsEOMFuncPlugin.Register

        Dim ret As Boolean
        ret = True

        Try

            If (Not m_UPS Is Nothing And IsReference(m_UPS)) Then

                ' plugin needs the thrust vector and the mass
                RegisterHandler.RegisterInput(AgEAsEOMFuncPluginInputStateValues.eEOMFuncPluginInputStateValuesThrustX)
                RegisterHandler.RegisterInput(AgEAsEOMFuncPluginInputStateValues.eEOMFuncPluginInputStateValuesThrustY)
                RegisterHandler.RegisterInput(AgEAsEOMFuncPluginInputStateValues.eEOMFuncPluginInputStateValuesThrustZ)

                RegisterHandler.RegisterInput(AgEAsEOMFuncPluginInputStateValues.eEOMFuncPluginInputStateValuesTotalMass)

                ' plugin gives the derivative of effective impulse and integrated delta-V
                RegisterHandler.RegisterUserDerivativeOutput("EffectiveImpulse")
                RegisterHandler.RegisterUserDerivativeOutput("IntegratedDeltaVx")
                RegisterHandler.RegisterUserDerivativeOutput("IntegratedDeltaVy")
                RegisterHandler.RegisterUserDerivativeOutput("IntegratedDeltaVz")

                ' plugin only needs to be called on evaluate
                RegisterHandler.ExcludeEvent(AgEAsEOMFuncPluginEventTypes.eEOMFuncPluginEventTypesPrePropagate)
                RegisterHandler.ExcludeEvent(AgEAsEOMFuncPluginEventTypes.eEOMFuncPluginEventTypesPreNextStep)
                RegisterHandler.ExcludeEvent(AgEAsEOMFuncPluginEventTypes.eEOMFuncPluginEventTypesPostPropagate)

            Else
                Throw New Exception("UtPluginSite was null")
            End If

        Catch ex As Exception
            ret = False

            If (Not m_UPS Is Nothing And IsReference(m_UPS)) Then

                m_UPS.Message(AgEUtLogMsgType.eUtLogMsgAlarm, m_Name & ".Regsiter(): Exception Message( " & ex.Message & " )")
                m_UPS.Message(AgEUtLogMsgType.eUtLogMsgAlarm, m_Name & ".Regsiter(): Exception StackTr( " & ex.StackTrace & " )")
            End If

        End Try

        Register = ret
    End Function

    Public Function SetIndices(ByVal SetIndicesHandler As AgAsEOMFuncPluginSetIndicesHandler) As Boolean Implements IAgAsEOMFuncPlugin.SetIndices

        Dim ret As Boolean
        ret = True

        Try


            If (Not m_UPS Is Nothing And IsReference(m_UPS)) Then

                ' get the indices for the input variables
                m_thrustXIndex = SetIndicesHandler.GetInputIndex(AgEAsEOMFuncPluginInputStateValues.eEOMFuncPluginInputStateValuesThrustX)
                m_thrustYIndex = SetIndicesHandler.GetInputIndex(AgEAsEOMFuncPluginInputStateValues.eEOMFuncPluginInputStateValuesThrustY)
                m_thrustZIndex = SetIndicesHandler.GetInputIndex(AgEAsEOMFuncPluginInputStateValues.eEOMFuncPluginInputStateValuesThrustZ)
                m_massIndex = SetIndicesHandler.GetInputIndex(AgEAsEOMFuncPluginInputStateValues.eEOMFuncPluginInputStateValuesTotalMass)

                ' get the indices for the derivatives we will output
                m_effectiveImpulseIndex = SetIndicesHandler.GetUserDerivativeOutputIndex("EffectiveImpulse")
                m_integratedDeltaVxIndex = SetIndicesHandler.GetUserDerivativeOutputIndex("IntegratedDeltaVx")
                m_integratedDeltaVyIndex = SetIndicesHandler.GetUserDerivativeOutputIndex("IntegratedDeltaVy")
                m_integratedDeltaVzIndex = SetIndicesHandler.GetUserDerivativeOutputIndex("IntegratedDeltaVz")

            Else
                Throw New Exception("UtPluginSite was null")
            End If

        Catch ex As Exception
            ret = False

            If (Not m_UPS Is Nothing And IsReference(m_UPS)) Then

                m_UPS.Message(AgEUtLogMsgType.eUtLogMsgAlarm, m_Name & ".SetIndices(): Exception Message( " & ex.Message & " )")
                m_UPS.Message(AgEUtLogMsgType.eUtLogMsgAlarm, m_Name & ".SetIndices(): Exception StackTr( " & ex.StackTrace & " )")
            End If

        End Try

        Return ret
    End Function

    Public Function Calc(ByVal eventType As AgEAsEOMFuncPluginEventTypes, ByVal StateVector As AgAsEOMFuncPluginStateVector) As Boolean Implements IAgAsEOMFuncPlugin.Calc

        Dim ret As Boolean
        ret = True

        Try
            If (Not m_UPS Is Nothing And IsReference(m_UPS)) Then

                ' get the current thrust values, and give back the derivatives of
                ' effective impulse and the integrated delta V components

                ' get thrust
                Dim thrustX, thrustY, thrustZ As Double
                thrustX = StateVector.GetInputValue(m_thrustXIndex)
                thrustY = StateVector.GetInputValue(m_thrustYIndex)
                thrustZ = StateVector.GetInputValue(m_thrustZIndex)

                ' get mass
                Dim mass As Double
                mass = StateVector.GetInputValue(m_massIndex)


                ' derivative of effective impulse is the total thrust magnitude
                Dim thrustMag As Double
                thrustMag = Math.Sqrt(thrustX * thrustX + thrustY * thrustY + thrustZ * thrustZ)
                StateVector.AddDerivativeOutputValue(m_effectiveImpulseIndex, thrustMag)

                ' rotate thrust vector to desired integration frame for integrated delta-V
                m_CCA.TransformComponents(StateVector, thrustX, thrustY, thrustZ)

                ' the derivative of each integrated delta-V component is that component of thrust acceleration 
                StateVector.AddDerivativeOutputValue(m_integratedDeltaVxIndex, thrustX / mass)
                StateVector.AddDerivativeOutputValue(m_integratedDeltaVyIndex, thrustY / mass)
                StateVector.AddDerivativeOutputValue(m_integratedDeltaVzIndex, thrustZ / mass)

            Else
                Throw New Exception("UtPluginSite was null")
            End If

        Catch ex As Exception
            ret = False

            If (Not m_UPS Is Nothing And IsReference(m_UPS)) Then
                m_UPS.Message(AgEUtLogMsgType.eUtLogMsgAlarm, m_Name & ".Calc(): Exception Message( " & ex.Message & " )")
                m_UPS.Message(AgEUtLogMsgType.eUtLogMsgAlarm, m_Name & ".Calc(): Exception StackTr( " & ex.StackTrace & " )")
            End If
            Debug.WriteLine("Exception Message( " + ex.Message + " )", m_Name & ".Calc()")
            Debug.WriteLine("Exception StackTr( " + ex.StackTrace + " )", m_Name & ".Calc()")
        End Try

        Return ret
    End Function


    Public Sub Free() Implements IAgAsEOMFuncPlugin.Free

        Try
            If (Not m_UPS Is Nothing And IsReference(m_UPS)) Then

                Marshal.ReleaseComObject(m_UPS)
            End If
            m_UPS = Nothing

            If (Not m_SPS Is Nothing And IsReference(m_SPS)) Then
                Marshal.ReleaseComObject(m_SPS)
            End If
            m_SPS = Nothing

        Catch ex As Exception
            If (Not m_UPS Is Nothing And IsReference(m_UPS)) Then
                m_UPS.Message(AgEUtLogMsgType.eUtLogMsgAlarm, m_Name & ".Free(): Exception Message( " & ex.Message & " )")
                m_UPS.Message(AgEUtLogMsgType.eUtLogMsgAlarm, m_Name & ".Free(): Exception StackTr( " & ex.StackTrace & " )")
            End If
        End Try

    End Sub

#End Region

#Region "IAgUtPluginConfig Interface Implementation"

    Public Function GetPluginConfig(ByVal aab As AgAttrBuilder) As Object Implements IAgUtPluginConfig.GetPluginConfig

        Try
            If (IsReference(m_Scope)) Then
                m_Scope = aab.NewScope()

                '//===========================
                '// General Plugin attributes
                '//===========================
                aab.AddStringDispatchProperty(m_Scope, "DeltaVAxes", "Axes in which to integrate delta-V", "DeltaVAxes", CInt(AgEAttrAddFlags.eAddFlagNone))
            End If

            Dim config As String

            config = aab.ToString(Me, m_Scope)
        Catch
        End Try

        GetPluginConfig = m_Scope
    End Function

    Public Sub VerifyPluginConfig(ByVal apcvr As AgUtPluginConfigVerifyResult) Implements IAgUtPluginConfig.VerifyPluginConfig

        Dim result As Boolean
        Dim message As String

        result = True
        message = "Ok"

        Try

        Catch ex As Exception

            result = False
            message = ex.Message
        End Try

        apcvr.Result = result
        apcvr.Message = message
    End Sub


#End Region

End Class


'//=====================================================//
'//  Copyright 2009, Analytical Graphics, Inc.          //
'//=====================================================//