using AGI.Attr;
using AGI.Hpop.Plugin;
using AGI.Plugin;
using System;
using System.Runtime.InteropServices;

using AGI.STK.Plugin;
using AGI.VectorGeometryTool.Plugin;

namespace AGI.Drag.Lift.CSharp.Example
{
    public interface IDragLiftModelExample
    {
        bool DebugMode { get; set; }
        bool PluginEnabled { get; set; }
        double DragArea { get; set; }
        double LiftArea { get; set; }
    }

    /// <summary>
    /// DragLiftExample uses TBD
    /// </summary>
    // NOTE: Generate your own Guid using Microsoft's GuidGen.exe
    [Guid("64065678-EC9A-421B-A4ED-DE9EBEE09EE8")]
    // NOTE: Create your own ProgId to match your plugin's namespace and name
    [ProgId("AGI.Drag.Lift.CSharp.Example")]
    // NOTE: Specify the ClassInterfaceType.None enumeration, so the custom COM Interface 
    // you created is used instead of an autogenerated COM Interface.
    [ClassInterface(ClassInterfaceType.None)]
    public class DragLiftExample : IDragLiftModelExample, IAgAsDragModelPlugin, IAgUtPluginConfig
    {
        #region IDragLiftModelExample Implementation 

        private bool _DebugMode = true;
        public bool DebugMode
        {
            get
            {
                return _DebugMode;
            }
            set
            {
                _DebugMode = value;
            }
        }


        private bool _Enabled = true;
        public bool PluginEnabled
        {
            get
            {
                return _Enabled;
            }
            set
            {
                _Enabled = value;
            }
        }

        private double _DragArea = 20.0;
        public double DragArea
        {
            get
            {
                return _DragArea;
            }
            set
            {
                _DragArea = value;
            }
        }

        private double _LiftArea = 20.0;
        public double LiftArea
        {
            get
            {
                return _LiftArea;
            }
            set
            {
                _LiftArea = value;
            }
        }

        #endregion IDragLiftModelExample Implementation

        private int _CDIndex = -1;
        private int _CLIndex = -1;
        private double _CD = 2.02;
        private double _CL = 0.1;

        private int _MsgCntr = 0;
        IAgCrdnConfiguredCalcScalar _trueAnomScalar;
        IAgCrdnConfiguredVector _posVec;

        #region IAgUtPluginConfig Implementation 

        private object _oPluginConfig = null;

        public object GetPluginConfig(AGI.Attr.AgAttrBuilder pAttrBuilder)
        {
            DebugMessage(AgEUtLogMsgType.eUtLogMsgDebug, "DragLiftExample:GetPluginConfig()");

            if (_oPluginConfig == null)
            {
                _oPluginConfig = pAttrBuilder.NewScope();
                pAttrBuilder.AddQuantityDispatchProperty2(_oPluginConfig,
                    "DragArea",
                    "Drag Area",
                    "DragArea",
                    "Area",
                    "m^2",
                    "m^2",
                    (int)AgEAttrAddFlags.eAddFlagNone);

                pAttrBuilder.AddQuantityDispatchProperty2(_oPluginConfig,
                    "LiftArea",
                    "Lift Area",
                    "LiftArea",
                    "Area",
                    "m^2",
                    "m^2",
                    (int)AgEAttrAddFlags.eAddFlagNone);

                /*
                 * General Plugin attributes
                 */
                pAttrBuilder.AddBoolDispatchProperty(_oPluginConfig,
                    "PluginEnabled",
                    "If the plugin is enabled or has experienced an error",
                    "PluginEnabled",
                    (int)AgEAttrAddFlags.eAddFlagNone);

                pAttrBuilder.AddBoolDispatchProperty(_oPluginConfig,
                    "DebugMode",
                    "Turn debug messages on or off",
                    "DebugMode",
                    (int)AgEAttrAddFlags.eAddFlagNone);

                //pAttrBuilder.AddFileDispatchProperty(_oPluginConfig,
                //    "DebugFile",
                //    "Debug output file",
                //    "DebugFile", "", "*.txt",
                //    (int)AgEAttrAddFlags.eAddFlagNone);

                /*
                 * Messaging related attributes
                 */

                //pAttrBuilder.AddIntDispatchProperty(_oPluginConfig,
                //    "MessageInterval",
                //    "The interval at which to send messages during propagation in Debug mode",
                //    "MsgInterval",
                //    (int)AgEAttrAddFlags.eAddFlagNone);
            }

            return _oPluginConfig;
        }

        public void VerifyPluginConfig(AgUtPluginConfigVerifyResult pPluginCfgResult)
        {
            DebugMessage(AgEUtLogMsgType.eUtLogMsgDebug, "DragLiftExample:VerifyPluginConfig()");

            pPluginCfgResult.Result = true;
            pPluginCfgResult.Message = "OK";
        }

        #endregion IAgUtPluginConfig Implementation 

        #region IAgAsDragModelPlugin Implementation 

        private IAgUtPluginSite _AgUtPluginSite = null;

        public void Register(AgAsDragModelResultRegister Result)
        {
            DebugMessage(AgEUtLogMsgType.eUtLogMsgDebug, "DragLiftExample:Register()");

            if (Result != null)
            {
                DebugMessage(AgEUtLogMsgType.eUtLogMsgInfo, "Register() called, cd = " + _CD.ToString());

                _CDIndex = Result.RegisterParameter("CD", _CD, 0.0, 20.0, "Unitless");

                if (_CDIndex > -1)
                {
                    DebugMessage(AgEUtLogMsgType.eUtLogMsgInfo, "Registered CD as Unitless parameter");
                }
                else
                {
                    Result.Message(AgEUtLogMsgType.eUtLogMsgAlarm, "Unable to register CD as Unitless parameter");
                }

                _CLIndex = Result.RegisterParameter("CL", _CL, -20.0, 20.0, "Unitless");

                if (_CLIndex > -1)
                {
                    DebugMessage(AgEUtLogMsgType.eUtLogMsgInfo, "Registered CL as Unitless parameter");
                }
                else
                {
                    Result.Message(AgEUtLogMsgType.eUtLogMsgAlarm, "Unable to register CL as Unitless parameter");
                }
            }
        }

        public bool Init(IAgUtPluginSite Site)
        {
            DebugMessage(AgEUtLogMsgType.eUtLogMsgDebug, "DragLiftExample:Init()");

            if (Site != null)
            {
                _AgUtPluginSite = Site;

                if (_Enabled)
                {
                    DebugMessage(AgEUtLogMsgType.eUtLogMsgInfo, "DragLiftExample:Init(): Enabled");
                }
                else
                {
                    DebugMessage(AgEUtLogMsgType.eUtLogMsgInfo, "DragLiftExample:Init(): Disabled because Enabled flag is False");
                }
                
                if(_Enabled)
                {
                    IAgCrdnPluginCalcProvider calcPrv = null;
                    IAgCrdnPluginProvider vtPrv = null;

                    IAgGatorPluginSite gatorSite = Site as IAgGatorPluginSite;

                    if (gatorSite != null)
                    {
                        calcPrv = gatorSite.CalcToolProvider;
                        vtPrv = gatorSite.VectorToolProvider;
                    }
                    else
                    {
                        IAgStkPluginSite stkSite = Site as IAgStkPluginSite;

                        if (stkSite != null)
                        {
                            calcPrv = stkSite.CalcToolProvider;
                            vtPrv = stkSite.VectorToolProvider;
                        }
                    }

                    if (calcPrv != null)
                    {
                        string CalcName = "Orbit.Classical.TrueAnomaly";
                        string SourceName = ""; // "Satellite/RefSat"; // Can use <MySelf> (or "" which means <Myself>)

                        _trueAnomScalar = calcPrv.GetCalcScalar(CalcName, SourceName);

                        if (_trueAnomScalar == null)
                        {
                            Message(AgEUtLogMsgType.eUtLogMsgAlarm, "Cannot obtain TrueAnomaly CalcScalar");
                        }
                        else if (!_trueAnomScalar.IsConfigured)
                        {
                            Message(AgEUtLogMsgType.eUtLogMsgAlarm, "TrueAnomaly CalcScalar not configured for use");

                            _trueAnomScalar = null;
                        }
                        else
                        {
                            DebugMessage(AgEUtLogMsgType.eUtLogMsgInfo, "TrueAnomaly CalcScalar ready for use");
                        }
                    }
                    else
                    {
                        Message(AgEUtLogMsgType.eUtLogMsgAlarm, "Cannot obtain CalcToolProvider");
                    }

                    if(vtPrv != null)
                    {
                        string VectorName = "Position";
                        string SourceName = ""; // "Satellite/RefSat";     // Can use <MySelf> (or "" which means <Myself>)
                        string RefAxesName = "Fixed"; 
                        string RefAxesSourceName = "CentralBody/Earth";

                        _posVec = vtPrv.ConfigureVector(VectorName, SourceName, RefAxesName, RefAxesSourceName);

                        if(_posVec == null)
                        {
                            Message(AgEUtLogMsgType.eUtLogMsgAlarm, "Cannot obtain Position vector");
                        }
                        else if(!_posVec.IsConfigured)
                        {
                            Message(AgEUtLogMsgType.eUtLogMsgAlarm, "Position vector not configured for use");

                            _posVec = null;
                        }
                        else
                        {
                            DebugMessage(AgEUtLogMsgType.eUtLogMsgInfo, "Position vector ready for use");
                        }
                    }
                    else
                    {
                        Message(AgEUtLogMsgType.eUtLogMsgAlarm, "Cannot obtain VectorToolProvider");
                    }
                }
            }
            else
            {
                Message(AgEUtLogMsgType.eUtLogMsgAlarm, "DragLiftExample:Init(): Forcing Disabled because Plugin Site was null!");

                _Enabled = false;
            }

            return _Enabled;
        }

        public void Free()
        {
            DebugMessage(AgEUtLogMsgType.eUtLogMsgDebug, "DragLiftExample:PreCompute() called");
        }

        public bool PreCompute(AgAsDragModelResult Result)
        {
            DebugMessage(AgEUtLogMsgType.eUtLogMsgDebug, "DragLiftExample:PreCompute() called");

            if (_Enabled)
            {
                if (Result != null)
                {
                    if (_DebugMode)
                    {
                        //# Open debug file and write header
                        //open(DEBUGFILE, ">$m_DebugFile");
                    }
                }

                _MsgCntr = 0;
            }
            else 
            {
                DebugMessage(AgEUtLogMsgType.eUtLogMsgInfo, "DragLiftExample:PreCompute(): Disabled");
            }

            return _Enabled;
        }

        public bool PostCompute(AgAsDragModelResult Result)
        {
            DebugMessage(AgEUtLogMsgType.eUtLogMsgDebug, "DragLiftExample:PostCompute()");

            if (_Enabled)
            {
                DebugMessage(AgEUtLogMsgType.eUtLogMsgInfo, "DragLiftExample:PostCompute(): Enabled");

                //close(DEBUGFILE);
            }
            else
            {
                DebugMessage(AgEUtLogMsgType.eUtLogMsgInfo, "DragLiftExample:PostCompute(): Disabled");
            }

            return _Enabled;
        }

        public bool Evaluate(AgAsDragModelResultEval ResultEval)
        {
            _MsgCntr++;

            if (_Enabled && (ResultEval != null))
            {
                double cd = 0.0;
                double cl = 0.0;

                if (_CDIndex > -1)
                {
                    cd = ResultEval.ParameterValue(_CDIndex);
                }

                if (_CDIndex > -1)
                {
                    cl = ResultEval.ParameterValue(_CLIndex);
                }

                if (_MsgCntr % 1000 == 0)
                {
                    if (_trueAnomScalar != null)
                    {
                        double val = 0.0;
                        if (_trueAnomScalar.CurrentValue(ResultEval, ref val))
                        {
                            DebugMessage(AgEUtLogMsgType.eUtLogMsgInfo, "TrueAnomaly: (" + val.ToString() + ")");
                        }
                        else
                        {
                            Message(AgEUtLogMsgType.eUtLogMsgWarning, "TrueAnomaly calcscalar value could not be obtained.");
                        }
                    }

                    if (_posVec != null)
                    {
                        double X = 0.0, Y = 0.0, Z = 0.0;
                        if(_posVec.CurrentValue(ResultEval, ref X, ref Y, ref Z))
                        {
                            DebugMessage(AgEUtLogMsgType.eUtLogMsgInfo, "Position: (" + X.ToString() + ", " + Y.ToString() + ", " + Z.ToString() + ")");
                        }
                        else
                        {
                            Message(AgEUtLogMsgType.eUtLogMsgWarning, "Position vector values could not be obtained.");
                        }
                    }
                }

                SetDragLiftReflectanceInFixed(ResultEval, cd, cl);

            }

            return _Enabled;

        }

        #endregion IAgAsDragModelPlugin Implementation

        private bool SetDragLiftReflectanceInFixed(AgAsDragModelResultEval result, double cd, double cl)
        {
            bool returnValue = false;

            Array incidentVecFixed = result.IncidentDirection_Array(AgEUtFrame.eUtFrameFixed);

            Array posParts = Array.CreateInstance(typeof(Object), 9);
            posParts.SetValue(0.0, 0); posParts.SetValue(0.0, 1); posParts.SetValue(0.0, 2);
            posParts.SetValue(0.0, 3); posParts.SetValue(0.0, 4); posParts.SetValue(0.0, 5);
            posParts.SetValue(0.0, 6); posParts.SetValue(0.0, 7); posParts.SetValue(0.0, 8);

            Array velParts = Array.CreateInstance(typeof(Object), 9);
            velParts.SetValue(0.0, 0); velParts.SetValue(0.0, 1); velParts.SetValue(0.0, 2);
            velParts.SetValue(0.0, 3); velParts.SetValue(0.0, 4); velParts.SetValue(0.0, 5);
            velParts.SetValue(0.0, 6); velParts.SetValue(0.0, 7); velParts.SetValue(0.0, 8);

            if (incidentVecFixed != null)
            {

                // particle reflectance is positive along the incidence vector
                //   and the incidence vector is opposite the fixed velocity. 

                double x = _DragArea * (double)incidentVecFixed.GetValue(0);
                double y = _DragArea * (double)incidentVecFixed.GetValue(1);
                double z = _DragArea * (double)incidentVecFixed.GetValue(2);

                if (_CDIndex > -1)
                {
                    // printf DEBUGFILE "CD partials: %20.15e, %20.15e, %20.15e\n", $x, $y, $z;
                    result.SetReflectanceParamPartials(_CDIndex, AgEUtFrame.eUtFrameFixed, x, y, z);
                }

                x *= cd;
                y *= cd;
                z *= cd;

                // Compute the direction of Lift
                Array pvFixedArray = result.PosVel_Array(AgEUtFrame.eUtFrameFixed);
                Array crossTrackArray = CrossProduct(pvFixedArray, incidentVecFixed);
                Normalize(crossTrackArray);
                Array liftDirFixed = CrossProduct(crossTrackArray, incidentVecFixed);

                double xL = _LiftArea * (double)liftDirFixed.GetValue(0);
                double yL = _LiftArea * (double)liftDirFixed.GetValue(1);
                double zL = _LiftArea * (double)liftDirFixed.GetValue(2);

                if (_CLIndex > -1)
		        {
                    //printf DEBUGFILE "PV: %20.15e, %20.15e, %20.15e\n", $pvFixedArray->[0], $pvFixedArray->[1], $pvFixedArray->[2];
                    //printf DEBUGFILE "Lift dir: %20.15e, %20.15e, %20.15e\n", $liftDirFixed->[0], $liftDirFixed->[1], $liftDirFixed->[2];
                    //printf DEBUGFILE "Xtrack dir: %20.15e, %20.15e, %20.15e\n", $crossTrackArray->[0], $crossTrackArray->[1], $crossTrackArray->[2];
                    //printf DEBUGFILE "Lift area: %20.15e\n", $m_LiftArea;
                    //printf DEBUGFILE "CL partials: %20.15e, %20.15e, %20.15e\n", $xL, $yL, $zL;
                    //printf DEBUGFILE "CL index: %2d\n", $m_CLIndex;
			        result.SetReflectanceParamPartials(_CLIndex, AgEUtFrame.eUtFrameFixed, xL, yL, zL);
                }
		
		        xL *= cl;
		        yL *= cl;
		        zL *= cl;
		
		        x += xL;
		        y += yL;
		        z += zL;
		
	            //#printf DEBUGFILE "Cd: %10.3f\nIncidence: %20.15e %20.15e %20.15e \n", 
                //   #	$cd, $incidentVecFixed->[0], $incidentVecFixed->[1], $incidentVecFixed->[2];
	            //#printf DEBUGFILE "Cl: %10.3f\nLift: %20.15e %20.15e %20.15e \n", 
                //   #	$cd, $liftDirFixed->[0], $liftDirFixed->[1], $liftDirFixed->[2];
               
		        result.SetReflectance(AgEUtFrame.eUtFrameFixed, x, y, z);

                //printf DEBUGFILE "reflectance: %20.15e, %20.15e, %20.15e\n", $x, $y, $z;

                Array incidentDirPosPartialsArrayFixed = result.IncidentDirectionCompPosPartials_Array(AgEUtFrame.eUtFrameFixed);

                if (incidentDirPosPartialsArrayFixed != null)
                {
                    //# writeMatrix($incidentDirPosPartialsArrayFixed, "IncFixedPPs");

                    // Position partials

                    double BCoeff = cd * _DragArea;

                    for (int k = 0; k < 9; k++)
			        {
				        posParts.SetValue(BCoeff * (double)incidentDirPosPartialsArrayFixed.GetValue(k), k);
                    }

			        result.SetReflectanceCompPosPartials(AgEUtFrame.eUtFrameFixed,
                            (double)posParts.GetValue(0), (double)posParts.GetValue(1), (double)posParts.GetValue(2),
                            (double)posParts.GetValue(3), (double)posParts.GetValue(4), (double)posParts.GetValue(5),
                            (double)posParts.GetValue(6), (double)posParts.GetValue(7), (double)posParts.GetValue(8));

                    //# writeMatrix(\@posParts, "OutFixedPPs");

                    // Velocity partials
                    Array incidentDirVelPartialsArrayFixed = result.IncidentDirectionCompVelPartials_Array(AgEUtFrame.eUtFrameFixed);

                    if (incidentDirVelPartialsArrayFixed != null)
                    {
                        //# writeMatrix($incidentDirVelPartialsArrayFixed, "IncFixedVPs");

                        for (int k = 0; k < 9; k++)
				        {
					        velParts.SetValue(BCoeff * (double)incidentDirVelPartialsArrayFixed.GetValue(k), k);
                        }

				        result.SetReflectanceCompVelPartials(AgEUtFrame.eUtFrameFixed,
					        (double)velParts.GetValue(0), (double)velParts.GetValue(1), (double)velParts.GetValue(2),
					        (double)velParts.GetValue(3), (double)velParts.GetValue(4), (double)velParts.GetValue(5),
					        (double)velParts.GetValue(6), (double)velParts.GetValue(7), (double)velParts.GetValue(8));

                        //#writeMatrix(\@velParts, "OutFixedVPs");
                    }

                    //my $tempStr = "$m_MsgCntr> $cd $cl: ($x, $y, $z)";
                    //DebugMsg($tempStr);

                    returnValue = true;
                }
            }

            return returnValue;
        }

        private Array CrossProduct(Array aArrayRef, Array bArrayRef)
        {
            Array answer = Array.CreateInstance(typeof(Object), 3);

            answer.SetValue(((double)aArrayRef.GetValue(1) * (double)bArrayRef.GetValue(2))
                          - ((double)bArrayRef.GetValue(1) * (double)aArrayRef.GetValue(2)), 0);
            answer.SetValue(((double)aArrayRef.GetValue(2) * (double)bArrayRef.GetValue(0))
                          - ((double)bArrayRef.GetValue(2) * (double)aArrayRef.GetValue(0)), 1);
            answer.SetValue(((double)aArrayRef.GetValue(0) * (double)bArrayRef.GetValue(1))
                          - ((double)bArrayRef.GetValue(0) * (double)aArrayRef.GetValue(1)), 2);

            return answer;
        }

        private double Normalize(Array arrayRef)
        {
            double magnitude = Math.Sqrt(DotProduct(arrayRef, arrayRef));

            if (magnitude > 0.0)
            {
                arrayRef.SetValue((double)arrayRef.GetValue(0) / magnitude, 0);
                arrayRef.SetValue((double)arrayRef.GetValue(1) / magnitude, 1);
                arrayRef.SetValue((double)arrayRef.GetValue(2) / magnitude, 2);
            }

            return magnitude;
        }

        private double DotProduct(Array aArrayRef, Array bArrayRef)
        {
            double returnValue =
                  (double)aArrayRef.GetValue(0) * (double)bArrayRef.GetValue(0)
                + (double)aArrayRef.GetValue(1) * (double)bArrayRef.GetValue(1)
                + (double)aArrayRef.GetValue(2) * (double)bArrayRef.GetValue(2);

            return returnValue;
        }

        private void Message(AgEUtLogMsgType msgType, String msg)
        {
            if ((msgType == AgEUtLogMsgType.eUtLogMsgDebug)
                && (!_DebugMode))
            {
                return;
            }

            if (_AgUtPluginSite != null)
            {
                _AgUtPluginSite.Message(msgType, msg);
            }
        }
        private void DebugMessage(AgEUtLogMsgType type, string msg)
        {
            if (_DebugMode)
            {
                Message(type, msg);
            }
        }
    }
}
